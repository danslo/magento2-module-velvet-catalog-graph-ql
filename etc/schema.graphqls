enum ProductStatus {
    Enabled
    Disabled
}

type VelvetGridProduct {
    entity_id: Int!
    name: String!
    sku: String!
    type_id: String!
    price: String!
    quantity: Int!
    visibility: String!
    status: ProductStatus!
}

type VelvetAttributeOption {
    label: String!
    value: String
}

type VelvetStockAttributeValue {
    is_in_stock: Boolean!
    qty: Float!
}

type VelvetStringAttributeValue {
    value: String
}

type VelvetGalleryImage {
    value_id: Int!
    file: String!
    media_type: String!
    position: Int!
    disabled: Boolean!
}

type VelvetGalleryAttributeValue {
    images: [VelvetGalleryImage!]!
}

type VelvetTierPrice {
    price_id: Int!
    website_id: Int!
    all_groups: Boolean!
    cust_group: Int!
    price: Float!
    price_qty: Float!
    percentage_value: Float
    website_price: Float!
}

type VelvetTierPriceAttributeValue {
    prices: [VelvetTierPrice!]!
}

union VelvetAttributeValue @typeResolver(class: "Danslo\\VelvetCatalogGraphQl\\Model\\Resolver\\Product\\AttributeValueUnionResolver") =
    | VelvetStockAttributeValue
    | VelvetStringAttributeValue
    | VelvetGalleryAttributeValue
    | VelvetTierPriceAttributeValue

type VelvetAttribute {
    label: String!
    value: VelvetAttributeValue!
    type: String!
    code: String!
    required: Boolean!
    options: [VelvetAttributeOption!]!
}

type VelvetAttributeGroup {
    label: String!
    attributes: [VelvetAttribute!]!
}

type VelvetProduct {
    attribute_groups: [VelvetAttributeGroup!]!
    categories: [CategoryTree!]! @resolver(class: "Magento\\CatalogGraphQl\\Model\\Resolver\\CategoryList")
    category_ids: [Int!]!
}

type Query {
    productGrid(input: GridInput): GridOutput! @resolver(class: "Danslo\\VelvetCatalogGraphQl\\Model\\Resolver\\Product\\Grid")
    productView(product_id: Int!): VelvetProduct! @resolver(class: "Danslo\\VelvetCatalogGraphQl\\Model\\Resolver\\Product\\View")
}
